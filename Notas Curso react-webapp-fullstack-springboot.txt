
	****** 	React: Creando webapp Full Stack con Spring Boot 2024	*******

## Crear proyecto de React con Vite:
Crear carpeta: intro-javascript -> arrastrarla a VSC -> abrir terminal y ejecutar:
	npm create vite@latest	// elegir Y -> dar nombre a proyecto: "intro-js" -> 
elegir React -> elegir JavaScript -> Listo.

## Abrir proyecto de react:
	Entrar a la ruta del proyecto: cd intro-js  
  -- Instalar las dependencias del package.json ejecutar dentro de la carpeta intro-js: 
esto genera la carpeta node_modules
	npm install  -> ejecutar para levantar la app -> npm run dev


// Ejemplo de crear proyecto de React usando Vite
PS C:\Users\Escritorio\react-webapp-fullstack-springboot> npm create vite@latest
√ Project name: ... 2-intro-react   //definir nombre del proyecto
√ Select a framework: » React		//Elegir React
√ Select a variant: » JavaScript	//Elegir JavaScript

Done. Now run:    
  cd 2-intro-react	//Entrar a la carpeta del proyecto creado
  npm install     	//Instalar las dependencias
  npm run dev 		//Levantar el proyecto



//Notas:
//Configurando PropTypes para validaciones de las propiedades para que el tipo de dato que se espera sea el correcto
//para esto se debe instalar la dependencia: npm install prop-types
//Validacion para verificar si las variables de parametros definidad en la funcion viene de la 
clase padre, o asignar valores por defecto

Ejemplo de como usarlo: 
import PropTypes from 'prop-types';

UserNombreDeLaClase.propTypes = {
    id: PropTypes.number.isRequired,
    user: PropTypes.object.isRequired,
}

//Establecer valores por defecto a las props o parametros en la funcion, datos viene de la clase padre(main.jsx)
//Los valores por defecto solo se aplican si no vienen los valores desde la clase padre, siempre tiene  prioridad la clase padre.
//Primero se agrega los valores por defecto en caso que no vengan los valores y despues se valida el tipo de dato sea el correcto
HelloWorldApp.defaultProps = {
    title: 'Hola mundo por defecto!',
    book: 'UML got a gota'
}



/// Creando Proyect InvoiceApp - Vite + React

-- npm create vite //Crear el proyecto
Need to install the following packages:
create-vite@5.2.2
Ok to proceed? (y) y    //Escribimos Y
√ Project name: ... 4-invoice-app   //Escribimos nombre del proyecto
√ Select a framework: » React		//Elegimos React como Framework a usar
√ Select a variant: » JavaScript	//Elegimos JavaScript

  cd 4-invoice-app  //Entramos al proyecto creado
  npm install     //Instalamos las dependencias del proyecto.
  npm run dev	//Levantamos el proyecto
 
-- Agregar BootStrap al proyecto

Ir a https://getbootstrap.com/  --> Descargas --> copiar(menos el script) los CDN via jsDelivr 
-->  pegar el CDN en el index.html dentro de la etiqueta head. 
y tambien copiar el script popperjs dentro del body (sirve para menus desplegables)


-- Creando proyecto CartApp

PS C:\Users\Escritorio\react-webapp-fullstack-springboot> npm create vite
√ Project name: ... 5-cart-app  //nombre del proyecto
√ Select a framework: » React	//elegir React
√ Select a variant: » JavaScript	//Elegir JavaScript

Done. Now run:
  cd 5-cart-app	//Ingresar a la carpeta del proyecto creado
  npm install  	//Ejecutar para instalar las dependencias
  npm run dev 	//Levantar la applicacion

-- Agregar BootStrap al proyecto

Ir a https://getbootstrap.com/  --> Descargas --> copiar(menos el script) los CDN via jsDelivr 
-->  pegar el CDN en el index.html dentro de la etiqueta head. 
y tambien copiar el script popperjs dentro del body (sirve para menus desplegables)


-- Informacion sobre Guardar los items del carrito en el sessionStorage
https://developer.mozilla.org/es/docs/Web/API/Window/sessionstorage

LocalStorage: SI queremos que perdure la informacion aun cerrando el navegador
SessionStorage: SI queremos que perdure la informacion unicamente cuando 
		esta abierto el navegador aun asi recarquemos la pagina la info no se pierde
Para implementarlo cambiar Local por Session _Storage


// Almacena la información en sessionStorage
sessionStorage.setItem("key", "value");

// Obtiene la información almacenada desde sessionStorage
var data = sessionStorage.getItem("key");


Que es Reducer?
- Es una funcio normal que recibe 2 argumentos
	const productReducer = (state, action) => {		
	};

	//Otro ejemplo
const initialState = [
	{ 
	 id:1,
	 name: 'Teclado',
	 description: 'sony 2023',
	 price: 1000
	},
	{ 
	 id:2,
	 name: 'Samsung Tv',
	 description: '20 pulgadas',
	 price: 4000
	},
]

//Permite manejar mas estados que a diferencia del useState que solo permite manejar 1
const productReducer = (state = initialState, action) => {
	switch(action.type){
	case "add":
	case "update":
	case "remove":
	default:
	return state;
	}		
};

- Es sincrona
- Debe devolver un nuevo estado.
- No debe de tener dependencias con otras funciones
- Debe tener una o mas acciones.

- UseReducer sirve para manejar el estado de forma centralizada donde se tiene muchas funcionalidades

https://es.legacy.reactjs.org/docs/hooks-reference.html#usereducer
https://es.react.dev/reference/react/useReducer














































